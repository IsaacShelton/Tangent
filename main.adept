
#set show_fps false
#set fullscreen true
#set cheats true
#set no_inventory true

pragma compiler_supports '2.2'
pragma no_type_info

import 'AABB.adept'
import 'Bullet.adept'
import 'Cannon.adept'
import 'CannonBall.adept'
import 'ControlScheme.adept'
import 'GameAnimation.adept'
import 'GameImageEx.adept'
import 'Item.adept'
import 'Player.adept'
import 'Region.adept'
import 'Crawler.adept'
import 'Swordfish.adept'
import 'Optional.adept'
import 'Theme.adept'
import 'SlimeBoss.adept'
import 'Text.adept'
import 'globals.adept'
import 'addons.adept'
import 'scenes.adept'
import 'logic.adept'
import 'draw.adept'
import 'where.adept'
import 'themes.adept'
import 'camera.adept'
import 'inventory.adept'

import '2.2/basics.adept'
import '2.2/List.adept'
import 'captain_prototype/captain.adept'

func main {
    unless captPrepare(), return
    
    captOnSetup(func &on_setup)
    captOnStep(func &on_step, 60)
    captOnKey(func &on_key)
    captOnDraw(func &on_draw)
    captOnExit(func &on_exit)
    
    captAddTypical(64.0f, 64.0f)
    captAddTypical(64.0f, 32.0f)
    captAddTypical(128.0f, 128.0f)
    
    captHideMouse()
    captCustomView(1920.0f, 1280.0f)
    #if fullscreen
        captStart('Tangent', true)
    #else
        captStart('Tangent', 1920 / 2, 1080 / 2, false)
    #end
}

func on_setup {
    captRandomize()
    loadAssets()
    loadThemes()
    setupState()
    gotoTitleScreen()
    
    #if show_fps
        previous_time = glfwGetTime()
        frame_count = 0
    #end
}

func on_exit {
    destroyAssets()
}

func on_step {
    // Removed closed signboards
    if signboard.has && signboard.value.closed(), signboard.rid()
    
    // Animate signboards
    if signboard.has, signboard.value.update()
    
    // Animate collected resources
    each CollectedResource in collected_resources {
        target_screen_x float = 1792.0f + 14.0f
        target_screen_y float = 32.0f + 14.0f
        
        it.x = (it.x < target_screen_x - 4.0f) ? it.x + (target_screen_x - it.x) / 4.0f : target_screen_x
        it.y = (it.y > target_screen_y + 4.0f) ? it.y + (target_screen_y - it.y) / 4.0f : target_screen_y
        
        if it.x == target_screen_x && it.y == target_screen_y {
            collected_resources.remove(idx--)
            continue
        }
    }
    
    // Handle player when dead
    if is_dead {
        // Respawn if death animation is over
        if death_y > 1280.0f || --respawn_timer == 0 {
            is_dead = false
            respawn_timer = 0
            item = Item::NONE
            cannon.rid()
            gotoScene(scene)
        }
        
        // Animate death if initial pause-time is over
        if respawn_timer < 120 {
            death_x += death_vx
            death_y += death_vy
            death_vy += 1.0f
        }
        
        return
    }
    
    // Wait to resume if paused
    if is_paused, return

    // Ease background inventory shadow
    if inventory_open {
        inventory_bg_shade = fabs(inventory_bg_shade - 0.5f) < 0.01f ? 0.5f : (inventory_bg_shade * 4.0f + 0.5f) / 5.0f
    } else {
        inventory_bg_shade = fabs(inventory_bg_shade) < 0.01f ? 0.0f : inventory_bg_shade * 4.0f / 5.0f
    }
    
    // Animate item pick up
    if item != Item::NONE {
        target_screen_x float = 1792.0f + 14.0f
        target_screen_y float = 32.0f + 14.0f
        
        item_screen_x = (item_screen_x < target_screen_x - 4.0f) ? item_screen_x + (target_screen_x - item_screen_x) / 4.0f : target_screen_x
        item_screen_y = (item_screen_y > target_screen_y + 4.0f) ? item_screen_y + (target_screen_y - item_screen_y) / 4.0f : target_screen_y
    }
    
    // Don't run main game logic if inventory is open
    if inventory_open, return
    
    if player.swimming {
        gun_swim.update()
        cannoneer_swim.update()
        
        unless playerIsInWater() {
            // Transition from swimming -> walking
            player.swimming = false
            swim.reset()
            walk.reset()
            gun_walk.reset()
            gun_swim.reset()
            cannoneer_walk.reset()
            cannoneer_swim.reset()
            player.vy -= 20
            
            // Launch player in direction if moving horizontall
            if player.moving_horizontally, player.vx += player.direction * 10
        }
    } else if playerIsInWater() {
        // Transition from walking - > swimming
        player.swimming = true
        swim.reset()
        walk.reset()
        gun_walk.reset()
        gun_swim.reset()
        cannoneer_walk.reset()
        cannoneer_swim.reset()
    }
    
    // Update conditional animations
    if player.moving {
        if player.swimming && item != Item::GUN {
            swim.update()
        } else unless player.parachuting {
            if item == Item::GUN,         gun_walk.update()
            else if item == Item::CANNON, cannoneer_walk.update()
            else                          walk.update()
        }
    }
    
    theme.wave.update()
    inwards_portal.update()
    disabled_portal.update()
    outwards_portal.update()
    enabler.update()
    
    // Record movement & whether horizontally moving
    player.moving = false
    player.moving_horizontally = false
    
    each Particle in particles {
        if it.update(), particles.remove(idx--)
    }
    
    each Bullet in bullets {
        it.x += it.vx
        
        // Destroy off-screen bullets
        if it.x < 0 || it.x > scene_width as int {
            bullets.remove(idx--)
            continue
        }
        
        aabb AABB = it.getAABB()
        
        if collidingGround(aabb) != null {
            bullets.remove(idx--)
            continue
        }
        
        hit bool = false
        
        // Test hit for crawlers
        each Crawler in crawlers {
            if aabb.intersecting(it.getAABB()) {
                it.drop()
                crawlers.remove(idx--)
                hit = true
                break
            }
        }
        
        // Test hit for swordfish
        unless hit, each Swordfish in swordfishes {
            if aabb.intersecting(it.getAABB()) {
                swordfishes.remove(idx--)
                hit = true
                break
            }
        }
        
        // Test hit for slime boss
        unless hit || !slime_boss.has, if aabb.intersecting(slime_boss.value.getAABB()) {
            slime_boss.value.hurt(1)
            hit = true
        }
        
        if hit, bullets.remove(idx--)
    }
    
    if cannon_ball.has {
        cannon_ball.value.x += cannon_ball.value.vx
        aabb AABB = cannon_ball.value.getAABB()
        
        // Destroy off-screen & stopped cannons balls
        if cannon_ball.value.x < 0 || cannon_ball.value.x as float > scene_width ||
                collidingGround(aabb) != null {
            cannon_ball.rid()
        } else {
            hit bool = false
            
            // Test hit for crawlers
            each Crawler in crawlers {
                if aabb.intersecting(it.getAABB()) {
                    it.drop()
                    crawlers.remove(idx--)
                    hit = true
                    break
                }
            }
            
            // Test hit for swordfish
            unless hit, each Swordfish in swordfishes {
                if aabb.intersecting(it.getAABB()) {
                    swordfishes.remove(idx--)
                    hit = true
                    break
                }
            }
            
            // Test hit for slime boss
            unless hit || !slime_boss.has, if aabb.intersecting(slime_boss.value.getAABB()) {
                slime_boss.value.hurt(2)
                hit = true
            }
            
            if !hit && aabb.intersecting(player.getAABB()){
                killPlayer()
                return
            }
        }
    }
    
    if captKeyHeld(controls.right) {
        // Walk right
        player.x += (item == Item::WING && captKeyHeld(controls.a)) ? 8 : 6
        player.direction = 1
        player.moving = true
        player.moving_horizontally = true
        
        // Prevent walking into something
        collision *Region = playerCollidingPlatform(player.y, false)
        if collision, player.x = collision.getX() - 64
        
        // Close signboard if reading
        if signboard.has, signboard.value.close()
    }
    
    if captKeyHeld(controls.left) {
        // Walk left
        player.x += (item == Item::WING && captKeyHeld(controls.a)) ? -8 : -6
        player.direction = -1
        player.moving = true
        player.moving_horizontally = true
        
        // Prevent walking into something
        collision *Region = playerCollidingPlatform(player.y, false)
        if collision, player.x = collision.getMaxX()
        
        // Close signboard if reading
        if signboard.has, signboard.value.close()
    }
    
    drop_through bool = captKeyHeld(controls.down)
    currently_on_ground *Region = playerOnPlatform(drop_through)
    
    if player.swimming {
        // Swimming Mode
        
        if captKeyHeld(controls.up) || captKeyHeld(controls.alt_up) {
            // Swim upwards
            previous_y int = player.y
            player.y -= (item == Item::WING && captKeyHeld(controls.a)) ? 6 : 4
            player.moving = true
            
            // Prevent swimming upwards into something
            collision *Region = playerCollidingPlatform(previous_y, false)
            if collision, player.y = collision.getMaxY()
            
            // Close signboard if reading
            if signboard.has, signboard.value.close()
        }
        
        if captKeyHeld(controls.down) {
            // Swim downwards
            previous_y int = player.y
            player.y += (item == Item::WING && captKeyHeld(controls.a)) ? 6 : 4
            player.moving = true
            
            // Prevent swimming downwards into something
            collision *Region = playerCollidingPlatform(previous_y, drop_through)
            if collision, player.y = collision.getY() - 64
            
            // Close signboard if reading
            if signboard.has, signboard.value.close()
        }
        
        // Sink player in water
        player.vy += (player.vy < 1) ? 1 : (player.vy > 1) ? -1 : 0
    } else if currently_on_ground == null {
        // Airborn Mode
        player.vy += (player.vy < 24) ? 1 : 0
    } else {
        // Grounded Mode
        double_jumped = false
        
        if item == Item::WING && captKeyHeld(controls.b) {
            // Wing Big Jump Ability
            player.vy = -24
            player.vx += player.moving_horizontally ? 1 : 0
            particles.add(particle(smoke, player.x, player.y, 64, 64))
                
            // Close signboard if reading
            if signboard.has, signboard.value.close()
        } else if captKeyHeld(controls.up) || captKeyHeld(controls.alt_up) {
            // Standard Jump
            player.vy = -20
            
            // Close signboard if reading
            if signboard.has, signboard.value.close()
        } else {
            // Stand on Ground
            player.vy = 0
        }
    }
    
    // Parachute if falling in air and UP is held
    player.parachuting = currently_on_ground == null && player.vy > 0 && (captKeyHeld(controls.up) || captKeyHeld(controls.alt_up))
    if player.parachuting && player.vy > 4, player.vy = 4
    
    // Apply horizontal force on player
    player.x += player.vx
    collision *Region = playerCollidingPlatform(player.y, false)
    if collision, player.x = (player.vx > 0) ? collision.getX() - 64 : collision.getMaxX()
    
    // Apply vertical force on player
    player.y += player.vy
    collision = playerCollidingPlatform(player.y - player.vy, drop_through)
    if collision, player.y = (player.vy > 0) ? collision.getY() - 64 : collision.getMaxY()
    
    // Apply friction
    player.vx += (player.vx < 0) ? 1 : (player.vx > 0) ? -1 : 0
    
    // Clamp player to level
    player.x = (player.x < 0) ? 0 : (player.x as float + 64.0f > scene_width) ? scene_width as int - 64 : player.x
    player.y = (player.y < 0) ? 0 : (player.y as float + 64.0f > 1280.0f) ? 1216 : player.y
    
    // Animate teleportation
    if teleporting {
        teleport_opacity -= 0.1f
        
        if teleport_opacity < 0.0f {
            player = shadow.thaw()
            teleporting = false
        }
    }
    
    // Handle item pick up
    each ItemSpawn in item_spawns {
        if it.collision.intersecting(player.getAABB()) {
            if item == it.item, break
            pickupItem(it)
            break
        }
    }
    
    // Collect portal enabler if applicable
    if portal_enabler.has && portal_enabler.value.collision.intersecting(player.getAABB()) {
        portal_enabler.value.collected = true
    }
    
    // Move portal enabler towards portal if collected
    if portal_enabler.has && portal_enabler.value.collected && exit.has {
        exit_x int = exit.value.visual.x + 32
        exit_y int = exit.value.visual.y + 48
        new_x int = (portal_enabler.value.collision.x + exit_x) / 2
        new_y int = (portal_enabler.value.collision.y + exit_y) / 2
        
        portal_enabler.value.collision.x = new_x
        portal_enabler.value.collision.y = new_y
        portal_enabler.value.visual.x = new_x
        portal_enabler.value.visual.y = new_y
        
        x_diff double = abs(new_x - exit_x) as double
        y_diff double = abs(new_y - exit_y) as double
        dist double = sqrt(x_diff * x_diff + y_diff * y_diff)
        
        if dist < 2.0 {
            exit_disabled = false
            portal_enabler.rid()
        }
    }
    
    // Update camera
    updateCamera()
    
    // Update enemies
    updateCrawlers()
    updateSwordfish()
    
    // Update bosses
    if slime_boss.has, slime_boss.value.update()
    
    // Update cannon
    updateCannon()
    
    // Animate sign 'Press H' message
    each Sign in signs {
        target_opacity float = it.inRange() ? 1.0f : 0.0f
        it.press_h_opacity = fabs(it.press_h_opacity - target_opacity) > 0.0001f ? it.press_h_opacity + (target_opacity - it.press_h_opacity) / 6.0f : target_opacity
    }
    
    // Scene events
    if scene == 11 && crawlers.length == 0 && !slime_boss.has && exit_disabled && !portal_enabler.has,
        portal_enabler.set(portalEnabler(928, 480, 64, 64))
    
    // Goto next scene if at exit portal
    if exit.has && !exit_disabled && exit.value.collision.intersecting(player.getAABB()) {
        gotoScene(++scene)
    }
}

func on_key(key int, scancode int, action int, mods int) {
    if action != GLFW_PRESS, return
    
    // Resource cheats
    #if cheats
    if key == GLFW_KEY_F1, repeat 6, resources[idx] += 100
    #end
    
    // Only allow resuming when game is paused
    if key == controls.pause, pause(); return
    if is_paused, return
    
    // Start game if on title screen
    if scene == 0, gotoScene1()

    // If reading sign, close the signboard
    if signboard.has, signboard.value.close()

    if key == GLFW_KEY_T, gotoThemeTestScreen(); return
    if key == GLFW_KEY_Y, cycleThemes(); return
    
    // Toggle inventory
    if key == GLFW_KEY_E && !signboard.has, toggleInventory()
    
    // Debug position
    if key == GLFW_KEY_P, print("rx: %, ry: %, x32: %, y32: %" % player.x % player.y % (player.x - player.x % 32) % (player.y - player.y % 32))
    
    // Don't allow main game actions when inventory is open
    if inventory_open, controlInventory(key); return
    
    // Changing Control Schemes
    if controls == wasd {
        if key == GLFW_KEY_UP || key == GLFW_KEY_DOWN || key == GLFW_KEY_LEFT || key == GLFW_KEY_RIGHT,
            controls = arrows
    } else if controls == arrows {
        if key == GLFW_KEY_W || key == GLFW_KEY_S || key == GLFW_KEY_A || key == GLFW_KEY_D,
            controls = wasd
    }
    
    // Reading signs
    if key == controls.interact {
        if signboard.has, signboard.value.close()
        else each Sign in signs, if it.inRange(), it.read(); break
    }
    
    drop_through bool = captKeyHeld(controls.down)
    
    if item == Item::STAR {
        // Teleport to save-state
        if key == controls.a, teleport()
        
        // Set save-state
        if key == controls.b,
            shadow = player.freeze(getImageForPlayer(player))
    } else if item == Item::GUN {
        if key == controls.a && !player.swimming {
            // Shoot gun
            particles.add(particle(smoke, player.x + player.direction * 128, player.y, 64, 64))
            bullets.add(bullet(player.x + player.direction * 96 + 16, player.y + 28, player.direction * 20))
        }
    } else if item == Item::CANNON {
        if key == controls.a && cannon.has {
            c *Cannon = &cannon.value
            
            // Ignite
            particles.add(particle(flame, c.x + ((c.direction == 1) ? -4 : 120) - 16, c.y - 16, 64, 64))
            
            // Shoot cannon
            if !cannon_ball.has {
                cannon_ball.set(cannonBall(c.x + ((c.direction == 1) ? 128 : -40), c.y + 16, c.direction * 20))
                
                particles.add(particle(smoke, c.x + (c.direction == 1 ? 128 : -40), c.y, 64, 64))
            }
        }
        
        if key == controls.b {
            // Place cannon
            newCannon Cannon = cannon((player.direction == 1) ? player.x : player.x - 88, player.y - 128, player.direction)
            
            if collidingGround(newCannon.getAABB()) == null {
                // Not obstructed
                cannon.set(newCannon)
            }
        }
    } else if item == Item::DOUBLEJUMP && (key == controls.up || key == controls.alt_up) {
        unless playerIsInWater() || double_jumped  || playerOnPlatform(drop_through) != null {
            particles.add(particle(slimesmoke, player.x, player.y, 64, 64))
            player.vy = -20
            double_jumped = true
        }
    }
    
    #if cheats
    additional usize = 0
    if captKeyHeld(GLFW_KEY_LEFT_SHIFT),   additional += 10
    if captKeyHeld(GLFW_KEY_LEFT_CONTROL), additional += 20
    
    repeat 10, if key == GLFW_KEY_0 + idx, gotoScene(additional + (idx == 0 ? 10uz : idx))
    #end
}

func on_draw {
    #if show_fps
        current_time double = glfwGetTime()
        frame_count += 1
        
        if current_time - previous_time >= 1.0 {
            printf('FPS: %d\n', frame_count)
            frame_count = 0
            previous_time = current_time
        }
    #end
    
    captClearColor(captColor(1.0f, 1.0f, 1.0f))
    
    unless is_paused {
        sky_shift = cast float (glfwGetTime() * 1000.0f - accumulated_pause_time * 1000.0f) / 100.0f % captViewWidth()
    }
    captDrawTexture(theme.sky, ceilf(0.0f - sky_shift), 0.0f, captViewWidth(), captViewHeight())
    captDrawTexture(theme.sky, 0.0f - sky_shift + captViewWidth(), 0.0f, captViewWidth(), captViewHeight())
    
    // Draw background portion of lake
    each Lake in lakes, drawLakeBehind(it)
    
    // Draw exit portal if one exists
    if exit.has {
        drawFromCamera(exit_disabled ? disabled_portal.now() : inwards_portal.now(),
            (&exit as *Region).getVisualX() as float,
            (&exit as *Region).getVisualY() as float,
            (&exit as *Region).getVisualWidth() as float,
            (&exit as *Region).getVisualHeight() as float)
    }
    
    // Draw entrance portal if one exists
    if entrance.has {
        drawFromCamera(outwards_portal.now(),
            (&entrance as *Region).getVisualX() as float,
            (&entrance as *Region).getVisualY() as float,
            (&entrance as *Region).getVisualWidth() as float,
            (&entrance as *Region).getVisualHeight() as float)
    }
    
    each Sign in signs, drawSign(it)
    each Platform in platforms, drawPlatform(it)
    each Bridge in bridges, drawBridge(it)
    each Lake in lakes, drawLakeUpFront(it)
    each Bullet in bullets, drawFromCamera(bullet, it.x as float, it.y as float, 8.0f, 8.0f)
    
    if cannon.has,
        drawFromCameraEx(cannon_idle, cannon.value.x as float, cannon.value.y as float, 152.0f * cannon.value.direction as float, 72.0f)
    
    if cannon_ball.has,
        drawFromCamera(ball, cannon_ball.value.x as float, cannon_ball.value.y as float, 32.0f, 32.0f)
    
    each Particle in particles,
        drawFromCamera(it.now(), (&it as *Region).getVisualX() as float, (&it as *Region).getVisualY() as float, (&it as *Region).getVisualWidth() as float, (&it as *Region).getVisualHeight() as float)
    
    if portal_enabler.has {
        r *Region = &portal_enabler.value as *Region
        drawFromCamera(enabler.now(), r.getVisualX() as float, r.getVisualY() as float, r.getVisualWidth() as float, r.getVisualHeight() as float)
    }
    
    each ItemSpawn in item_spawns, drawItemSpawn(it)
    
    if slime_boss.has, slime_boss.value.draw()
    
    each Crawler in crawlers, drawCrawler(it)
    
    each Swordfish in swordfishes,
        drawFromCameraEx(it.now(), it.x as float, it.y as float, it.vx as float * 256.0f, 64.0f)
    
    // Draw player shadow for save-state powerup
    if item == Item::STAR, drawPlayer(shadow, 0.5f)
    
    // If alive render player otherwise render death animation
    if is_dead,             drawDeath()
    else unless scene == 0, drawPlayer(player, teleporting ? teleport_opacity : 1.0f)
    
    if scene == 0 || scene == 1 {
        drawFromCamera(how_to_play, 576.0f - 224.0f, 192.0f, 512.0f, 256.0f)
    }
    
    if scene == 2002,
        drawFromCamera(win, 576.0f - 224.0f, 192.0f + 32.0f, 512.0f, 128.0f)
    
    // Draw collected resources
    each CollectedResource in collected_resources {
        captDrawTexture(getImageForResource(it.resource), it.x, it.y, 64.0f, 64.0f)
    }
    
    if inventory_bg_shade != 0.0f {
        captDrawOpacity(inventory_bg_shade)
        captDrawTexture(bullet, 0.0f, 0.0f, captViewWidth(), captViewHeight())
        captDrawOpacity(1.0f)
    }
    
    // Draw powerup slot
    unless scene == 0,
        captDrawTexture(slot, 1792.0f, 32.0f, 96.0f, 96.0f)
    
    // Draw signboard
    if signboard.has, signboard.value.draw()
    
    // Draw inventory
    if inventory_open, drawInventory()
    
    // Draw acquired powerup
    if !is_dead && item != Item::NONE,
        captDrawTexture(getImageForItem(item), item_screen_x, item_screen_y, 64.0f, 64.0f)
}
