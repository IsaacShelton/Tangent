
func playerIsInWater bool {
    return isInWater(player.getAABB())
}

func isInWater(aabb AABB) bool {
    each Lake in lakes {
        if aabb.intersecting(it.collision), return true
    }
    return false
}

func collidingGround(aabb AABB) *Region = collidingGround(aabb, aabb.y, false)

func collidingGround(aabb AABB, true_y int, drop_through bool) *Region {
    each Platform in platforms {
        if it.collision.intersecting(aabb), return &it as *Region
    }
    unless drop_through, each Bridge in bridges {
        unless true_y + aabb.h <= it.collision.y, continue
        if it.collision.intersecting(aabb), return &it as *Region
    }
    return null
}

func playerCollidingPlatform(true_y int, drop_through bool) *Region {
    return collidingGround(player.getAABB(), true_y, drop_through)
}

func playerOnPlatform(drop_through bool) *Region {
    return collidingGround(player.getAABB(0, 1), player.y, drop_through)
}

func updateCrawlers {
    player_killed_crawler bool = false
    playerAABB AABB = player.getAABB()
    
    each Crawler in crawlers {
        // Update crawler's animation
        it.update()
        
        // Handle landing on ground
        ground *Region = collidingGround(it.getAABB(0, 1), it.y, false)
        it.vy = (ground != null) ? 0 : (it.vy < 24) ? it.vy + 1 : it.vy
        
        // Advance crawler
        collision *Region = null
        
        if it.kind == FROG {
            unless it.animation.current_frame == 0 || it.animation.current_frame == 4 {
                it.x += it.speed * it.vx * 2
                collision = collidingGround(it.getAABB())
            }
        } else {
            it.x += it.speed * it.vx
            collision = collidingGround(it.getAABB())
        }
        
        // Turn crawler around if ran into something
        if collision {
            it.x = (it.vx > 0) ? collision.getX() - 64 : collision.getMaxX()
            it.vx *= -1
        }
        
        // Apply gravity to crawler
        it.y += it.vy
        collision = collidingGround(it.getAABB(), it.y - it.vy, false)
        
        if collision {
            it.y = (it.vy > 0) ? collision.getY() - 32 : collision.getMaxY()
        }
        
        // Kill spiders in water
        if isInWater(it.getAABB()) {
            crawlers.remove(idx--)
            continue
        }
        
        // Handle player-spider collision
        if playerAABB.intersecting(it.getAABB()){
            if player.vy > 0 && player.y + 32 < it.y + 16 {
                it.drop()
                crawlers.remove(idx--)
                player_killed_crawler = true
                continue
            } else {
                killPlayer()
            }
        }
        
        // Turn spider around if about to fall off
        if ground && collidingGround(it.getAABB(it.vx * 64, 32)) == null {
            it.vx *= -1
        }
    }
    
    if player_killed_crawler, player.vy = -10
}

func updateSwordfish {
    playerAABB AABB = player.getAABB()
    
    each Swordfish in swordfishes {
        it.update()
        
        it.x += it.speed * it.vx
        collision *Region = collidingGround(it.getAABB())
        
        if collision {
            it.vx = (it.vx > 0) ? collision.getX() - 64 : collision.getMaxX()
            it.vx *= -1
        }
        
        if playerAABB.intersecting(it.getAABB()),
            killPlayer()
    }
}

func updateCannon {
    unless cannon.has, return
    c *Cannon = &cannon.value
    
    // Handle landing on ground
    ground *Region = collidingGround(c.getAABB(0, 1), c.y, false)
    c.vy = (ground != null) ? 0 : (c.vy < 32) ? c.vy + 1 : c.vy
    
    // Apply gravity to cannon
    c.y += c.vy
    collision *Region = collidingGround(c.getAABB(), c.y - c.vy, false)
    
    if collision {
        c.y = (c.vy > 0) ? collision.getY() - 72 : collision.getMaxY()
    }
    
    // If falling off screen, sit at bottom of lake
    if c.y + 72 > 1280 {
        c.y = 1280 - 72
        c.vy = 0
    }
}
