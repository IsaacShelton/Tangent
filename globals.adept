
import 'captain_prototype/captain.adept'
import 'GameAnimation.adept'

import 'textures.adept'
import 'animations.adept'

controls ControlScheme
wasd ControlScheme
arrows ControlScheme
player Player
shadow Player
default_shadow Player
camera_x float
camera_y float
sky_shift float
when_paused double
accumulated_pause_time double
teleporting bool
teleport_opacity float
is_paused bool
is_dead bool
respawn_timer int
death_x float
death_y float
death_vx float
death_vy float
death_image GameImageEx
scene int
scene_width float
platforms <Platform> List
lakes <Lake> List
bridges <Bridge> List
crawlers <Crawler> List
swordfishes <Swordfish> List
item_spawns <ItemSpawn> List
signs <Sign> List
entrance <Portal> Optional
exit <Portal> Optional
exit_disabled bool
portal_enabler <PortalEnabler> Optional
item Item
item_screen_x float
item_screen_y float
particles <Particle> List
bullets <Bullet> List
cannon <Cannon> Optional
cannon_ball <CannonBall> Optional
slime_boss <SlimeBoss> Optional
inventory_open bool
inventory_bg_shade float
inventory_selection_x int
inventory_selection_y int
inventory 18 Item
resources 6 int
STRINGS  == resources[0]
SLIMES   == resources[1]
LOGS     == resources[2]
FEATHERS == resources[3]
METALS   == resources[4]
CRYSTALS == resources[5]
numbers 10 CaptTexture
collected_resources <CollectedResource> List
crafting bool
craftable 18 Item
craftable_prices 18 Price
double_jumped bool
signboard <SignBoard> Optional

#if show_fps
    previous_time double
    frame_count int
#end

func loadAssets {
    assetsFolder String = where() + "assets/"
    loadTextures(assetsFolder)
    loadAnimations(assetsFolder)
}

func destroyAssets {
    destroyTextures()
    destroyAnimations()
    
    // HACK: Manually deleting global variables since compiler
    //       doesn't handle it yet
    platforms.__defer__()
    lakes.__defer__()
    bridges.__defer__()
    crawlers.__defer__()
    swordfishes.__defer__()
    item_spawns.__defer__()
    signs.__defer__()
    particles.__defer__()
    bullets.__defer__()
    collected_resources.__defer__()
}

func setupState {
    wasd = controlScheme(GLFW_KEY_SPACE, GLFW_KEY_S, GLFW_KEY_A, GLFW_KEY_D, GLFW_KEY_J, GLFW_KEY_K, GLFW_KEY_ESCAPE, GLFW_KEY_W, GLFW_KEY_H)
    arrows = controlScheme(GLFW_KEY_UP, GLFW_KEY_DOWN, GLFW_KEY_LEFT, GLFW_KEY_RIGHT, GLFW_KEY_SPACE, GLFW_KEY_LEFT_SHIFT, GLFW_KEY_ESCAPE, GLFW_KEY_UP, GLFW_KEY_H)
    controls = wasd
    when_paused = 0.0
    accumulated_pause_time = 0.0
    is_paused = false
    is_dead = false
    respawn_timer = 0
    scene = 0
    scene_width = 1920.0f
    item = Item::NONE
    item_screen_x = 0.0f
    item_screen_y = 0.0f
    inventory_open = false
    inventory_bg_shade = 0.0f
    inventory_selection_x = 0
    inventory_selection_y = 0
    clearInventory()
    numbers[0] = number0
    numbers[1] = number1
    numbers[2] = number2
    numbers[3] = number3
    numbers[4] = number4
    numbers[5] = number5
    numbers[6] = number6
    numbers[7] = number7
    numbers[8] = number8
    numbers[9] = number9
    craftable[0] = Item::WING
    craftable_prices[0].set(0, 0, 0, 5, 0, 0)
    craftable[1] = Item::STAR
    craftable_prices[1].set(0, 0, 0, 0, 0, 5)
    craftable[2] = Item::GUN
    craftable_prices[2].set(0, 0, 0, 0, 4, 1)
    craftable[3] = Item::CANNON
    craftable_prices[3].set(0, 0, 0, 0, 6, 2)
    craftable[4] = Item::DOUBLEJUMP
    craftable_prices[4].set(0, 4, 0, 0, 0, 0)
    double_jumped = false
}

func killPlayer {
    is_dead = true
    respawn_timer = 135
    death_x = player.x as float
    death_y = player.y as float
    death_vx = 0.0f
    death_vy = -30.0f
    signboard.value.close()
    
    if item == Item::GUN {
        // Technically height should be 88, but it looks better as 96
        death_image = gameImageEx(gun_death, 0, -24, 64, 96)
    } else if item == Item::CANNON {
        death_image = gameImageEx(cannoneer_death, 0, -24, 64, 88)
    } else {
        death_image = gameImageEx(death, 0, 0, 64, 64)
    }
}
